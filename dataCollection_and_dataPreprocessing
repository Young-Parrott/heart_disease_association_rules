{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8062170,"sourceType":"datasetVersion","datasetId":4755824}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-26T16:42:37.599454Z","iopub.execute_input":"2024-06-26T16:42:37.599917Z","iopub.status.idle":"2024-06-26T16:42:38.166742Z","shell.execute_reply.started":"2024-06-26T16:42:37.599882Z","shell.execute_reply":"2024-06-26T16:42:38.165201Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"/kaggle/input/heart-disease-dataset/documentation.pdf\n/kaggle/input/heart-disease-dataset/heart_statlog_cleveland_hungary_final.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"# Load the dataset into data frame\nraw_data_df = pd.read_csv('/kaggle/input/heart-disease-dataset/heart_statlog_cleveland_hungary_final.csv')\n\n# Generate sample of the dataset\nprint(raw_data_df.head())","metadata":{"execution":{"iopub.status.busy":"2024-06-26T16:42:38.169122Z","iopub.execute_input":"2024-06-26T16:42:38.169701Z","iopub.status.idle":"2024-06-26T16:42:38.215794Z","shell.execute_reply.started":"2024-06-26T16:42:38.169665Z","shell.execute_reply":"2024-06-26T16:42:38.214619Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"   age  sex  chest pain type  resting bp s  cholesterol  fasting blood sugar  \\\n0   40    1                2           140          289                    0   \n1   49    0                3           160          180                    0   \n2   37    1                2           130          283                    0   \n3   48    0                4           138          214                    0   \n4   54    1                3           150          195                    0   \n\n   resting ecg  max heart rate  exercise angina  oldpeak  ST slope  target  \n0            0             172                0      0.0         1       0  \n1            0             156                0      1.0         2       1  \n2            1              98                0      0.0         1       0  \n3            0             108                1      1.5         2       1  \n4            0             122                0      0.0         1       0  \n","output_type":"stream"}]},{"cell_type":"code","source":"# Generate descriptive Statistics about the dataset\nprint(raw_data_df.describe())","metadata":{"execution":{"iopub.status.busy":"2024-06-26T16:42:38.217090Z","iopub.execute_input":"2024-06-26T16:42:38.217444Z","iopub.status.idle":"2024-06-26T16:42:38.263704Z","shell.execute_reply.started":"2024-06-26T16:42:38.217414Z","shell.execute_reply":"2024-06-26T16:42:38.262355Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"               age          sex  chest pain type  resting bp s  cholesterol  \\\ncount  1190.000000  1190.000000      1190.000000   1190.000000  1190.000000   \nmean     53.720168     0.763866         3.232773    132.153782   210.363866   \nstd       9.358203     0.424884         0.935480     18.368823   101.420489   \nmin      28.000000     0.000000         1.000000      0.000000     0.000000   \n25%      47.000000     1.000000         3.000000    120.000000   188.000000   \n50%      54.000000     1.000000         4.000000    130.000000   229.000000   \n75%      60.000000     1.000000         4.000000    140.000000   269.750000   \nmax      77.000000     1.000000         4.000000    200.000000   603.000000   \n\n       fasting blood sugar  resting ecg  max heart rate  exercise angina  \\\ncount          1190.000000  1190.000000     1190.000000      1190.000000   \nmean              0.213445     0.698319      139.732773         0.387395   \nstd               0.409912     0.870359       25.517636         0.487360   \nmin               0.000000     0.000000       60.000000         0.000000   \n25%               0.000000     0.000000      121.000000         0.000000   \n50%               0.000000     0.000000      140.500000         0.000000   \n75%               0.000000     2.000000      160.000000         1.000000   \nmax               1.000000     2.000000      202.000000         1.000000   \n\n           oldpeak     ST slope       target  \ncount  1190.000000  1190.000000  1190.000000  \nmean      0.922773     1.624370     0.528571  \nstd       1.086337     0.610459     0.499393  \nmin      -2.600000     0.000000     0.000000  \n25%       0.000000     1.000000     0.000000  \n50%       0.600000     2.000000     1.000000  \n75%       1.600000     2.000000     1.000000  \nmax       6.200000     3.000000     1.000000  \n","output_type":"stream"}]},{"cell_type":"code","source":"# Check for missing values\nprint(raw_data_df.isna().sum())","metadata":{"execution":{"iopub.status.busy":"2024-06-26T16:42:38.265090Z","iopub.execute_input":"2024-06-26T16:42:38.265482Z","iopub.status.idle":"2024-06-26T16:42:38.275909Z","shell.execute_reply.started":"2024-06-26T16:42:38.265445Z","shell.execute_reply":"2024-06-26T16:42:38.273808Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"age                    0\nsex                    0\nchest pain type        0\nresting bp s           0\ncholesterol            0\nfasting blood sugar    0\nresting ecg            0\nmax heart rate         0\nexercise angina        0\noldpeak                0\nST slope               0\ntarget                 0\ndtype: int64\n","output_type":"stream"}]},{"cell_type":"code","source":"# Check feature types of dataset\nprint(raw_data_df.dtypes)\n\n# Check number of rows in dataset\nprint('\\nNumber of Rows in the dataset: ')\nprint(len(raw_data_df))\n\n# Check number of columns in dataset\nprint('\\nNumer of Columns in the dataset: ')\nprint(len(raw_data_df.columns))","metadata":{"execution":{"iopub.status.busy":"2024-06-26T16:42:38.279812Z","iopub.execute_input":"2024-06-26T16:42:38.280411Z","iopub.status.idle":"2024-06-26T16:42:38.291866Z","shell.execute_reply.started":"2024-06-26T16:42:38.280357Z","shell.execute_reply":"2024-06-26T16:42:38.290020Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"age                      int64\nsex                      int64\nchest pain type          int64\nresting bp s             int64\ncholesterol              int64\nfasting blood sugar      int64\nresting ecg              int64\nmax heart rate           int64\nexercise angina          int64\noldpeak                float64\nST slope                 int64\ntarget                   int64\ndtype: object\n\nNumber of Rows in the dataset: \n1190\n\nNumer of Columns in the dataset: \n12\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**From the documentation description of the data:**\n\n1. age: Given in years; Numeric\n2. sex: 1,0; Binary\n    - 1 = male\n    - 0 = female\n3. chest pain type:  1,2,3,4; Nominal\n    - 1 = typical angina\n    - 2 = atyical angina\n    - 3 = non-anginal pain\n    - 4 = asymptomatic\n4. resting blood pressure: in mm Hg, Numeric\n5. serum cholesterol: in mg/dl, Numeric\n6. fasting blood sugar: 1,0 > 120mg/dl, Binary\n    - 1 = true\n    - 0 = false\n7. resting electrocardiogram results: 0,1,2; Nomial\n    - 0 = normal\n    - 1 = having ST-T wave abnormality\n    - 2 = showing probable or definite left ventrivular hypertrophy by Estes' criteria\n8. maximum heart rate achieved: 71-202 Numeric\n9. exercise induced angina: 0,1; Binary\n    - 1 = yes\n    - 0 = no\n10. oldpeat =ST: depression; numeric\n11. the slope of peak exercise ST segment: 0,1,2 Nominal\n    - 1 = upsloping\n    - 2 = flat\n    - 3 = downsloping\n12. class: 0,1 Binary\n    - 1 = heart disease\n    - 2 = Normal","metadata":{}},{"cell_type":"code","source":"# Define Numeric, Categorical, features\nnumeric_feats = ['age', 'resting bp s', 'cholesterol', 'max heart rate', 'oldpeak']\nnominal_feats = ['ST slope', 'resting ecg', 'chest pain type']\nbinary_feats = ['sex', 'fasting blood sugar', 'exercise angina', 'target']","metadata":{"execution":{"iopub.status.busy":"2024-06-26T16:42:38.293285Z","iopub.execute_input":"2024-06-26T16:42:38.293950Z","iopub.status.idle":"2024-06-26T16:42:38.310050Z","shell.execute_reply.started":"2024-06-26T16:42:38.293909Z","shell.execute_reply":"2024-06-26T16:42:38.308597Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"# Convert nominal_feats into categories then binarize them\nchest_pain_type_var = {'chest pain type':{0:'typical angina', 1:'atypical angina', 2:'non-anginal pain', 3:'asymptomatic'}}\nresting_ecg_var = {'resting ecg': {0:'normal', 1:'having ST-T wave abnormality', 2:'probable or definite left ventricular hypertrophy'}}\nST_slope_var = {'ST slope':{0:'upsloping', 1:'flat', 2:'downsloping'}}\n\n# Change the values back to string equivalent and convert to object\nraw_data_df = raw_data_df.replace(chest_pain_type_var)\nraw_data_df = raw_data_df.replace(resting_ecg_var)\nraw_data_df = raw_data_df.replace(ST_slope_var)\n\n# Binarize with pd dummies\n#raw_data_df = pd.get_dummies(raw_data_df, columns=nominal_feats)","metadata":{"execution":{"iopub.status.busy":"2024-06-26T16:42:38.312339Z","iopub.execute_input":"2024-06-26T16:42:38.313635Z","iopub.status.idle":"2024-06-26T16:42:38.334942Z","shell.execute_reply.started":"2024-06-26T16:42:38.313331Z","shell.execute_reply":"2024-06-26T16:42:38.333563Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"raw_data_df.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-06-26T16:42:38.337152Z","iopub.execute_input":"2024-06-26T16:42:38.337707Z","iopub.status.idle":"2024-06-26T16:42:38.356060Z","shell.execute_reply.started":"2024-06-26T16:42:38.337659Z","shell.execute_reply":"2024-06-26T16:42:38.354527Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"age                      int64\nsex                      int64\nchest pain type         object\nresting bp s             int64\ncholesterol              int64\nfasting blood sugar      int64\nresting ecg             object\nmax heart rate           int64\nexercise angina          int64\noldpeak                float64\nST slope                object\ntarget                   int64\ndtype: object"},"metadata":{}}]},{"cell_type":"code","source":"# Uncode the binary features for analysis\nsex_var =  {'sex':{0:'female',1:'male'}}\nfasting_blood_sugar_var = {'fasting blood sugar': {0:'false', 1:'true'}}\nexercise_angina_var = {'exercise angina': {0:'no',1:'yes'}}\nclass_var = {'target': {1:'heart disease', 0:'Normal'}}\n\n# Recode the binary features for use\nraw_data_df = raw_data_df.replace(sex_var)\nraw_data_df = raw_data_df.replace(fasting_blood_sugar_var)\nraw_data_df = raw_data_df.replace(exercise_angina_var)\nraw_data_df = raw_data_df.replace(class_var)\n\n# Binarize with pd.getdummies\n#raw_data_df = pd.get_dummies(raw_data_df, columns=binary_feats)","metadata":{"execution":{"iopub.status.busy":"2024-06-26T16:42:38.357802Z","iopub.execute_input":"2024-06-26T16:42:38.358291Z","iopub.status.idle":"2024-06-26T16:42:38.376188Z","shell.execute_reply.started":"2024-06-26T16:42:38.358248Z","shell.execute_reply":"2024-06-26T16:42:38.374875Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"raw_data_df.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-06-26T16:42:38.377983Z","iopub.execute_input":"2024-06-26T16:42:38.378683Z","iopub.status.idle":"2024-06-26T16:42:38.388514Z","shell.execute_reply.started":"2024-06-26T16:42:38.378640Z","shell.execute_reply":"2024-06-26T16:42:38.387094Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"age                      int64\nsex                     object\nchest pain type         object\nresting bp s             int64\ncholesterol              int64\nfasting blood sugar     object\nresting ecg             object\nmax heart rate           int64\nexercise angina         object\noldpeak                float64\nST slope                object\ntarget                  object\ndtype: object"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.preprocessing import KBinsDiscretizer\n\n# Convert Numeric features to proper Dtype and put into discrete bins then binarize\nraw_data_df['age'] = raw_data_df['age'].astype('int')\nraw_data_df['resting bp s'] = raw_data_df['resting bp s'].astype('int')\nraw_data_df['max heart rate'] = raw_data_df['max heart rate'].astype('int')\nraw_data_df['cholesterol'] = raw_data_df['cholesterol'].astype('int')\nraw_data_df['oldpeak'] = raw_data_df['oldpeak'].astype('float')\n\n\n# Ensure all nominal and binary features are of object type\nraw_data_df[nominal_feats + binary_feats] = raw_data_df[nominal_feats + binary_feats].astype('object')\n\n# Convert Numeric features to proper Dtype and put into discrete bins then binarize\nraw_data_df[numeric_feats] = raw_data_df[numeric_feats].apply(pd.to_numeric)\n\n# Bin the continuous data into intervals\n# Set up discretizer\nest = KBinsDiscretizer(n_bins=2, encode='ordinal', strategy='uniform')\n\n# fit the numeric data into bins\nraw_data_df[numeric_feats] = est.fit_transform(raw_data_df[numeric_feats])\n\n# Convert the binned data to binary using one-hot encoding\ndata_df = pd.get_dummies(raw_data_df, columns=nominal_feats + binary_feats)\n","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2024-06-26T16:42:38.390077Z","iopub.execute_input":"2024-06-26T16:42:38.390482Z","iopub.status.idle":"2024-06-26T16:42:38.447734Z","shell.execute_reply.started":"2024-06-26T16:42:38.390439Z","shell.execute_reply":"2024-06-26T16:42:38.446484Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"data_df.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-06-26T16:42:38.449199Z","iopub.execute_input":"2024-06-26T16:42:38.449640Z","iopub.status.idle":"2024-06-26T16:42:38.460117Z","shell.execute_reply.started":"2024-06-26T16:42:38.449605Z","shell.execute_reply":"2024-06-26T16:42:38.458608Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"age                                                              float64\nresting bp s                                                     float64\ncholesterol                                                      float64\nmax heart rate                                                   float64\noldpeak                                                          float64\nST slope_3                                                          bool\nST slope_downsloping                                                bool\nST slope_flat                                                       bool\nST slope_upsloping                                                  bool\nresting ecg_having ST-T wave abnormality                            bool\nresting ecg_normal                                                  bool\nresting ecg_probable or definite left ventricular hypertrophy       bool\nchest pain type_4                                                   bool\nchest pain type_asymptomatic                                        bool\nchest pain type_atypical angina                                     bool\nchest pain type_non-anginal pain                                    bool\nsex_female                                                          bool\nsex_male                                                            bool\nfasting blood sugar_false                                           bool\nfasting blood sugar_true                                            bool\nexercise angina_no                                                  bool\nexercise angina_yes                                                 bool\ntarget_Normal                                                       bool\ntarget_heart disease                                                bool\ndtype: object"},"metadata":{}}]},{"cell_type":"markdown","source":"Now the data is prepared for use with the apriori algorithm","metadata":{}},{"cell_type":"code","source":"data_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-26T16:42:38.461667Z","iopub.execute_input":"2024-06-26T16:42:38.462118Z","iopub.status.idle":"2024-06-26T16:42:38.502739Z","shell.execute_reply.started":"2024-06-26T16:42:38.462084Z","shell.execute_reply":"2024-06-26T16:42:38.501409Z"},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"   age  resting bp s  cholesterol  max heart rate  oldpeak  ST slope_3  \\\n0  0.0           1.0          0.0             1.0      0.0       False   \n1  0.0           1.0          0.0             1.0      0.0       False   \n2  0.0           1.0          0.0             0.0      0.0       False   \n3  0.0           1.0          0.0             0.0      0.0       False   \n4  1.0           1.0          0.0             0.0      0.0       False   \n\n   ST slope_downsloping  ST slope_flat  ST slope_upsloping  \\\n0                 False           True               False   \n1                  True          False               False   \n2                 False           True               False   \n3                  True          False               False   \n4                 False           True               False   \n\n   resting ecg_having ST-T wave abnormality  ...  \\\n0                                     False  ...   \n1                                     False  ...   \n2                                      True  ...   \n3                                     False  ...   \n4                                     False  ...   \n\n   chest pain type_atypical angina  chest pain type_non-anginal pain  \\\n0                            False                              True   \n1                            False                             False   \n2                            False                              True   \n3                            False                             False   \n4                            False                             False   \n\n   sex_female  sex_male  fasting blood sugar_false  fasting blood sugar_true  \\\n0       False      True                       True                     False   \n1        True     False                       True                     False   \n2       False      True                       True                     False   \n3        True     False                       True                     False   \n4       False      True                       True                     False   \n\n   exercise angina_no  exercise angina_yes  target_Normal  \\\n0                True                False           True   \n1                True                False          False   \n2                True                False           True   \n3               False                 True          False   \n4                True                False           True   \n\n   target_heart disease  \n0                 False  \n1                  True  \n2                 False  \n3                  True  \n4                 False  \n\n[5 rows x 24 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>resting bp s</th>\n      <th>cholesterol</th>\n      <th>max heart rate</th>\n      <th>oldpeak</th>\n      <th>ST slope_3</th>\n      <th>ST slope_downsloping</th>\n      <th>ST slope_flat</th>\n      <th>ST slope_upsloping</th>\n      <th>resting ecg_having ST-T wave abnormality</th>\n      <th>...</th>\n      <th>chest pain type_atypical angina</th>\n      <th>chest pain type_non-anginal pain</th>\n      <th>sex_female</th>\n      <th>sex_male</th>\n      <th>fasting blood sugar_false</th>\n      <th>fasting blood sugar_true</th>\n      <th>exercise angina_no</th>\n      <th>exercise angina_yes</th>\n      <th>target_Normal</th>\n      <th>target_heart disease</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>...</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 24 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"from mlxtend.frequent_patterns import apriori, association_rules\n\n# Use the Apriori algorithm\nfrequent_itemsets = apriori(data_df, min_support=0.3, use_colnames=True)\nrules = association_rules(frequent_itemsets, metric='confidence', min_threshold=0.5)\n\n# Print the association rules\nprint(\"Association Rules:\\n\", rules)","metadata":{"execution":{"iopub.status.busy":"2024-06-26T16:42:38.506493Z","iopub.execute_input":"2024-06-26T16:42:38.506958Z","iopub.status.idle":"2024-06-26T16:42:38.688106Z","shell.execute_reply.started":"2024-06-26T16:42:38.506922Z","shell.execute_reply":"2024-06-26T16:42:38.684471Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"Association Rules:\n                                          antecedents  \\\n0                                              (age)   \n1                                     (resting bp s)   \n2                                              (age)   \n3                                   (max heart rate)   \n4                                              (age)   \n..                                               ...   \n568                    (target_Normal, resting bp s)   \n569  (fasting blood sugar_false, exercise angina_no)   \n570               (exercise angina_no, resting bp s)   \n571                                  (target_Normal)   \n572                             (exercise angina_no)   \n\n                                           consequents  antecedent support  \\\n0                                       (resting bp s)            0.582353   \n1                                                (age)            0.987395   \n2                                     (max heart rate)            0.582353   \n3                                                (age)            0.619328   \n4                               (ST slope_downsloping)            0.582353   \n..                                                 ...                 ...   \n568    (fasting blood sugar_false, exercise angina_no)            0.466387   \n569                      (target_Normal, resting bp s)            0.492437   \n570         (target_Normal, fasting blood sugar_false)            0.605042   \n571  (fasting blood sugar_false, exercise angina_no...            0.471429   \n572  (target_Normal, fasting blood sugar_false, res...            0.612605   \n\n     consequent support   support  confidence      lift  leverage  conviction  \\\n0              0.987395  0.578151    0.992785  1.005459  0.003139    1.747059   \n1              0.582353  0.578151    0.585532  1.005459  0.003139    1.007670   \n2              0.619328  0.310084    0.532468  0.859751 -0.050583    0.814216   \n3              0.582353  0.310084    0.500678  0.859751 -0.050583    0.836429   \n4              0.489076  0.324370    0.556999  1.138880  0.039555    1.153324   \n..                  ...       ...         ...       ...       ...         ...   \n568            0.492437  0.354622    0.760360  1.544076  0.124956    2.118026   \n569            0.466387  0.354622    0.720137  1.544076  0.124956    1.906692   \n570            0.415126  0.354622    0.586111  1.411887  0.103453    1.413118   \n571            0.489076  0.354622    0.752228  1.538061  0.124058    2.062076   \n572            0.410084  0.354622    0.578875  1.411601  0.103402    1.400810   \n\n     zhangs_metric  \n0         0.013000  \n1         0.430717  \n2        -0.280879  \n3        -0.299977  \n4         0.291980  \n..             ...  \n568       0.660335  \n569       0.694226  \n570       0.738631  \n571       0.661842  \n572       0.752681  \n\n[573 rows x 10 columns]\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/mlxtend/frequent_patterns/fpcommon.py:109: DeprecationWarning: DataFrames with non-bool types result in worse computationalperformance and their support might be discontinued in the future.Please use a DataFrame with bool type\n  warnings.warn(\n","output_type":"stream"}]}]}